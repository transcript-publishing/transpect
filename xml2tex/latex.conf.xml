<?xml-model href="http://transpect.io/xml2tex/schema/xml2tex.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://transpect.io/xml2tex/schema/xml2tex.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<set xmlns="http://transpect.io/xml2tex" 
     xmlns:xml2tex="http://transpect.io/xml2tex" 
     xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  
  <xsl:import href="http://transpect.io/xslt-util/functx/Sequences/Sorting-and-Grouping/sort.xsl"/>
  
  <xsl:variable name="is-collection" select="matches($basename,  'ts_[a-z]{3}_anth_')" as="xs:boolean"/>

  <xsl:variable name="title" select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Titel']" as="element(dbk:keyword)?"/>
  <xsl:variable name="subtitle" select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Untertitel']" as="element(dbk:keyword)?"/>
  <xsl:variable name="editors" select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Herausgeber']" as="element(dbk:keyword)*"/>
  <xsl:variable name="authors" select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Autor']" as="element(dbk:keyword)*"/>
  <xsl:variable name="edition" select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Reihe']" as="element(dbk:keyword)*"/>
  <xsl:variable name="volumenum" select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Bandnummer']" as="element(dbk:keyword)*"/>
  
  <xsl:variable name="print-isbn" select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Print-ISBN']" as="element(dbk:keyword)?"/>
  <xsl:variable name="pdf-isbn" select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'PDF-ISBN']" as="element(dbk:keyword)?"/>
  <xsl:variable name="epub-isbn" select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'ePUB-ISBN']" as="element(dbk:keyword)?"/>
  
  <!--<xsl:variable name="contribs" select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Umschlaggestaltung'],
                                        /dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Umschlagcredit'],
                                        /dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Druck']" as="element(dbk:keyword)*"/>-->
  <xsl:variable name="copyright-holder" as="xs:string?"
                select="replace(tokenize(/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Copyright'], ',')[1],
                                '^.*?\d{4}(.*?)$', 
                                '$1')"/>
  <xsl:variable name="copyright-place" as="xs:string?" 
    select="tokenize(/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Copyright'], ',')[1]"/>
  <xsl:variable name="copyright-year" 
                select="replace(/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Copyright'], '^.*?(\d{4}).*?$', '$1')" as="xs:string?"/>
  <xsl:variable name="dedication" as="xs:string?"
                select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Widmung']"/>
  
  <xsl:variable name="series-logo" as="xs:string?" 
                select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Reihenlogo']"/>
  <xsl:variable name="editorial" as="xs:string?" 
    select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Editorial']"/>
  <xsl:variable name="author-info" as="xs:string?" 
    select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Autoreninformationen']"/>
  <xsl:variable name="website" as="xs:string?" 
    select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'transcript-Website']"/>
  <xsl:variable name="thanksto" as="xs:string?" 
    select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Dank']"/>
  <xsl:variable name="biblio-info" as="xs:string?" 
    select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Bibliografische_Information']"/>
  <xsl:variable name="license-logo" as="xs:string?" 
    select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Lizenzlogo']"/>
  <xsl:variable name="license-text" as="xs:string?" 
    select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Lizenztext']"/>
  <xsl:variable name="series-logo" as="xs:string?" 
    select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Reihenlogo']"/>
  <xsl:variable name="series-text" as="xs:string?" 
    select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Reihe']"/>
  <xsl:variable name="cover-art" as="xs:string?" 
    select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Umschlaggestaltung']"/>
  <xsl:variable name="cover-credit" as="xs:string?" 
    select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Umschlagcredit']"/>
  <xsl:variable name="copy-editing" as="xs:string?" 
    select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Korrektorat']"/>
  <xsl:variable name="typesetter" as="xs:string?" 
    select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Setzer']"/>
  <xsl:variable name="print" as="xs:string?" 
    select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Druck']"/>
  <xsl:variable name="lectorate" as="xs:string?" 
    select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Lektorat']"/>
  <xsl:variable name="translator" as="xs:string?" 
    select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Ubersetzer']"/>
  <xsl:variable name="grantlogo" as="xs:string?" 
    select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Forderlogo']"/>
  <xsl:variable name="granttext" as="xs:string?" 
    select="/dbk:hub/dbk:info/dbk:keywordset[@role eq 'titlepage']/dbk:keyword[@role eq 'Fordertext']"/>
  
  <xsl:variable name="new-common" as="xs:boolean" select="false()"/>
  
  <xsl:variable name="fig-style" select="'^figure\-([a-z])$'" as="xs:string"/>

  <ns prefix="dc" uri="http://purl.org/dc/elements/1.1/"/>
  <ns prefix="rdf" uri="http://www.w3.org/1999/02/22-rdf-syntax-ns#"/>
  
  <import href="../../common/xml2tex/latex.conf.xml"/>  
  
  <preamble>%
    % by transcript publishers
    %
    <xsl:value-of select="concat('\documentclass[',
                                 string-join(($babel-langs[position() ne 1],
                                              $babel-langs[1]), (: 1st lang is main lang and comes last :)
                                 ','),
                                 ',',
                                 if($is-collection) then 'collection' else 'book',
                                 ',lay=',
                                 lower-case($layout),
                                      if($notes-type eq 'endnotes' and $endnotes-with-chapter eq 'yes')  then ',endnotesperchapter'
                                 else if($notes-type eq 'endnotes')                                      then ',endnotes'
                                 else (),
                                 if($notes-type eq 'endnotes' and $notes-per-chapter-notoc eq 'yes') then ',ennotoc' else (),
                                 for $i in $other-scripts-in-doc
                                 return concat(',usescript=', $i),
                                 ']{transcript}&#xa;')"/>
    \definecolor{color-1}{rgb}{0,0,0}
    \definecolor{color-2}{rgb}{0.85,0.85,0.85}
    <xsl:for-each select="xml2tex:rgb-to-tex-color( $colors )">
      <xsl:if test="not(matches(., 'color-(1|2)'))">        
        <xsl:value-of select="concat('\define', ., '&#xa;')"/>
      </xsl:if>
    </xsl:for-each>
    <xsl:if test="$langs = 'zh'">
      <xsl:value-of select="'\usepackage{CJK}&#xa;'"/>
    </xsl:if>
    <xsl:choose>
      <xsl:when test="/dbk:hub/dbk:part">
        <xsl:text>\haspartstrue&#xa;</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>\haspartsfalse&#xa;</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:if test="$title-pages eq 'yes'">
      <xsl:value-of select="concat('&#xa;\title{', (normalize-space($title), 'Haupttitel')[1], '}&#xa;')"/>
      <xsl:if test="$subtitle">
        <xsl:value-of select="concat('&#xa;\subtitle{', normalize-space($subtitle), '}&#xa;')"/>
      </xsl:if>
      <xsl:for-each select="$editors">
        <xsl:value-of select="concat('&#xa;\editor{', normalize-space(.), '}&#xa;')"/>
      </xsl:for-each>
      <xsl:for-each select="$authors">
        <xsl:value-of select="concat('&#xa;\authorinfo{', normalize-space(dbk:personname/dbk:othername), '}',
                                     if(dbk:personblurb) then concat('{', dbk:personblurb, '}') else '',
                                     '&#xa;')"/>
      </xsl:for-each>
      <xsl:if test="$abstract">
        <xsl:text>&#xa;\editorial{</xsl:text>
        <xsl:apply-templates select="$abstract" mode="#current"/>
        <xsl:text>}&#xa;</xsl:text>
      </xsl:if>
      <xsl:if test="$edition">
        <xsl:value-of select="concat('&#xa;\edition{', normalize-space($edition), '}&#xa;')"/>
      </xsl:if>
      <xsl:if test="$print-isbn">
        <xsl:value-of select="concat('&#xa;\isbn{', $print-isbn, '}&#xa;')"/>
      </xsl:if>
      <xsl:if test="$pdf-isbn">
        <xsl:value-of select="concat('&#xa;\eisbn{', $pdf-isbn, '}&#xa;')"/>
      </xsl:if>
      <xsl:if test="$epub-isbn">
        <xsl:value-of select="concat('&#xa;\epubisbn{', $epub-isbn, '}&#xa;')"/>
      </xsl:if>
      <xsl:if test="$copyright-holder">
        <xsl:value-of select="concat('&#xa;\publ{', tokenize(normalize-space($copyright-holder), ',')[1], '}&#xa;')"/>
        <xsl:value-of select="concat('&#xa;\place{', tokenize(normalize-space($copyright-holder), ',')[2], '}&#xa;')"/>
      </xsl:if>
      <xsl:if test="$copyright-year">
        <xsl:value-of select="concat('&#xa;\publyear{', normalize-space($copyright-year), '}&#xa;')"/>
      </xsl:if>
      <xsl:if test="$license-text">
        <xsl:value-of select="concat('&#xa;\cctext{', normalize-space($license-text), '}&#xa;')"/>
      </xsl:if>
      <xsl:if test="$license-logo">
        <xsl:value-of select="concat('&#xa;\ccimage{', translate(replace(upper-case(normalize-space($license-logo)), '^.+/TIT_', 'logos/cc/$1'), '_', '-'), '}&#xa;')"/>
      </xsl:if>
      <xsl:if test="$cover-art">
        <xsl:value-of select="concat('&#xa;\coverDesign{', normalize-space($cover-art), '}&#xa;')"/>
      </xsl:if>
      <xsl:if test="$cover-credit">
        <xsl:value-of select="concat('&#xa;\coverimage{', normalize-space($cover-credit), '}&#xa;')"/>
      </xsl:if>
      <xsl:if test="$print">
        <xsl:value-of select="concat('&#xa;\print{', normalize-space($print), '}&#xa;')"/>
      </xsl:if>
      <xsl:if test="$typesetter">
        <xsl:value-of select="concat('&#xa;\typesetter{', normalize-space($typesetter), '}&#xa;')"/>
      </xsl:if>
      <xsl:if test="$copy-editing">
        <xsl:value-of select="concat('&#xa;\QandA{', normalize-space($copy-editing), '}&#xa;')"/>
      </xsl:if>
      <!--<xsl:for-each select="$contribs">
        <xsl:value-of select="concat('&#xa;\', @role, '{', normalize-space(.), '}&#xa;')"/>
      </xsl:for-each>-->
      <xsl:if test="$funder">
        <xsl:value-of select="concat('&#xa;\thanks{', normalize-space($funder), '}&#xa;')"/>
      </xsl:if>
      <xsl:if test="$dedication">
        <xsl:value-of select="concat('&#xa;\begin{dedication}&#xa;', normalize-space($dedication), '\end{dedication}&#xa;')"/>
      </xsl:if>
      <xsl:if test="$series-text">
        <xsl:value-of select="concat('&#xa;\series{', normalize-space($series-text), '}&#xa;')"/>
      </xsl:if>
      <xsl:if test="$series-logo">
        <xsl:for-each select="tokenize(normalize-space($series-logo), '\s')"><xsl:value-of select="concat('&#xa;\series{\includegraphics{', replace(., '^.+/', 'logos/series/$1'), '}}&#xa;')"/></xsl:for-each>
      </xsl:if>
    </xsl:if>
    
    <!-- global part/chapter/section numbering -->
    <!--<xsl:value-of select="concat('\setcounter{secnumdepth}{', 
           if(//dbk:part[1]/dbk:info/dbk:title[matches(@role, '^tsheadingenumerated\d$')])                              then '-2'
      else if(//dbk:chapter[1]/dbk:info/dbk:title[matches(@role, '^tsheadingenumerated\d$')])                           then '-1'
      else if(//dbk:section[count(ancestor::dbk:section) eq 0][1]/dbk:info/dbk:title[matches(@role, '^tsheadingenumerated\d$')]) then  '1'
      else if(//dbk:section[count(ancestor::dbk:section) eq 1][1]/dbk:info/dbk:title[matches(@role, '^tsheadingenumerated\d$')]) then  '2'
      else if(//dbk:section[count(ancestor::dbk:section) gt 1][1]/dbk:info/dbk:title[matches(@role, '^tsheadingenumerated\d$')]) then  '3'
      else                                                                                                                    '0'
      , '}&#xa;')"/>-->
    <xsl:for-each select="//dbk:index">
      <xsl:variable name="index-index" as="attribute(remap)" select="@remap"/>
      <xsl:value-of select="concat('\newindex{', $index-index, '}{', $index-index, '_idx}{', $index-index, '_ind}{', dbk:title/node(), '}&#xa;')"/>
    </xsl:for-each>
  </preamble>
  
  <front>
    <xsl:if test="$title-pages eq 'yes'">
      <xsl:text>\maketitle&#xa;</xsl:text>
    </xsl:if>
    <xsl:value-of select="'\setcounter{secnumdepth}{-1}&#xa;'"/>
    <xsl:value-of select="concat('\setcounter{tocdepth}{', 
                                   if(//dbk:part) 
                                   then xs:string(xs:integer($toc-depth) - 2)
                                   else xs:string(xs:integer($toc-depth) - 1),
                                   '}&#xa;')"/>
    <xsl:text>\tableofcontents&#xa;</xsl:text>
  </front>
  
    <template context="dbk:para[matches(@role, $endnotes-heading-style)]">
    <xsl:value-of select="concat('&#xa;\def\notesname{', . ,'}')"/>
    <xsl:text>&#xa;\printnotes&#xa;</xsl:text>
  </template>
  
  <template context="dbk:chapter[$notes-type eq 'endnotes' and $notes-per-chapter eq 'yes']
                                [.//dbk:footnote]
                                [not(.//dbk:para[matches(@role, $endnotes-heading-style)])]">

    <xsl:next-match/>
    <xsl:value-of select="concat('&#xa;\renewcommand{\notesname}{', 
                                 ('Anmerkungen', 'Notes', 'Notes')[index-of(('de', 'en', 'fr'), $main-lang)] ,
                                 '}')"/>
     <xsl:text>&#xa;\printnotes&#xa;</xsl:text>
    
  </template>
  
  <template context="dbk:dedication[@role eq 'tsded']">
    <rule name="wid" type="env"  break-after="1" break-before="1">
      <param/>
    </rule>
  </template>
  
  <template context="dbk:abbrev[matches(@role, $col-head-right-style)]">
    <rule name="chaptermark" type="cmd" break-after="1">
      <param/>
    </rule>
  </template>
  
  <template context="dbk:abbrev[matches(@role, concat($col-head-short-style, '|', $col-head-left-style))]">    
    <rule name="def\partmarkoverride" type="cmd" break-after="1" break-before="1">
      <param/>
    </rule>
  </template>
  
    <!-- suppress additional underline markup in titles -->
  
  <template context="dbk:part/dbk:title/dbk:phrase[matches(@role, '^[a-z]{2,3}underline$')]
                    |dbk:chapter/dbk:info/dbk:title/dbk:phrase[matches(@role, '^[a-z]{2,3}underline$')]
                    |dbk:section/dbk:title/dbk:phrase[matches(@role, '^[a-z]{2,3}underline$')]
                    |dbk:bibliography/dbk:title/dbk:phrase[matches(@role, '^[a-z]{2,3}underline$')]">
    <rule>
      <text/>
    </rule>
  </template>
  
   
  <!-- headings -->
  <template context="dbk:part/dbk:info 
                    |dbk:section/dbk:info
                    |dbk:chapter/dbk:info
                    |dbk:preface/dbk:info
                    |dbk:appendix/dbk:info
                    |dbk:bibliogaphy/dbk:info">
    <xsl:apply-templates select="node() except (dbk:title,
                                                dbk:abbrev[matches(@role, concat($col-head-short-style, '|', $col-head-left-style))],
                                                dbk:abbrev[matches(@role, $col-head-right-style)],
                                                dbk:abstract,
                                                if(parent::dbk:section) then dbk:epigraph else()
                                                ),
                                 dbk:title,
                                 dbk:abbrev[matches(@role, concat($col-head-short-style, '|', $col-head-left-style))], (: https://redmine.le-tex.de/issues/10417 :)
                                 dbk:abbrev[matches(@role, $col-head-right-style)],  (: https://redmine.le-tex.de/issues/10448 :)
                                 if(parent::dbk:section) then dbk:epigraph else(),
                                 dbk:abstract" 
                         mode="#current"/>
  </template>

  <xsl:template name="option-for-headlines">
    <xsl:if test=".//dbk:footnote
                 |parent::*/dbk:subtitle
                 |parent::*/dbk:info/dbk:subtitle">
      <xsl:text>[</xsl:text>
      <xsl:apply-templates select="node()" mode="#current">
        <xsl:with-param name="remove-footnote" select="true()" as="xs:boolean?" tunnel="yes"/>
      </xsl:apply-templates>
      <xsl:text>]</xsl:text>
    </xsl:if>
  </xsl:template>

  <template context="dbk:title[matches(@role, $genereral-heading-style)]/dbk:phrase[@role eq 'hub:identifier']"/>

  <template context="dbk:title[matches(@role, '^[a-z]{2,3}heading(enumerated)?1$')]">
    <xsl:choose>
      <xsl:when test="dbk:phrase[@role eq 'hub:identifier']">
        <xsl:value-of select="concat('\setcounter{secnumdepth}{', $secnumdepth, '}&#xa;')"/>
        <xsl:value-of select="string-join(('\def\thechapter{', dbk:phrase[@role eq 'hub:identifier'], '}&#xa;'), '')"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>\setcounter{secnumdepth}{-2}</xsl:text>    
      </xsl:otherwise>
    </xsl:choose>
    <rule name="chapter" type="cmd" break-after="2" break-before="2">
      <xsl:call-template name="option-for-headlines"/>
      <param/>
    </rule>
    <xsl:apply-templates select=".//dbk:anchor" mode="#current"/>
  </template>
    
  <template context="dbk:title[matches(@role, '^[a-z]{2,3}heading(enumerated)?2$')]">
    <xsl:choose>
      <xsl:when test="dbk:phrase[@role eq 'hub:identifier']">
        <xsl:value-of select="concat('\setcounter{secnumdepth}{', $secnumdepth, '}&#xa;')"/>
        <xsl:value-of select="string-join(('\def\thesection{', dbk:phrase[@role eq 'hub:identifier'], '}&#xa;'), '')"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>\setcounter{secnumdepth}{-1}</xsl:text>    
      </xsl:otherwise>
    </xsl:choose>
    <rule name="section" type="cmd" break-after="2" break-before="2">
      <xsl:call-template name="option-for-headlines"/>
      <param/>
    </rule>
    <xsl:apply-templates select=".//dbk:anchor" mode="#current"/>
  </template>
  
  <template context="dbk:title[matches(@role, '^[a-z]{2,3}heading(enumerated)?3$')]">
    <xsl:choose>
      <xsl:when test="dbk:phrase[@role eq 'hub:identifier']">
        <xsl:value-of select="concat('\setcounter{secnumdepth}{', $secnumdepth, '}&#xa;')"/>
        <xsl:value-of select="string-join(('\def\thesubsection{', dbk:phrase[@role eq 'hub:identifier'], '}&#xa;'), '')"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>\setcounter{secnumdepth}{0}</xsl:text>    
      </xsl:otherwise>
    </xsl:choose>
    <rule name="subsection" type="cmd" break-after="2" break-before="2">
      <xsl:call-template name="option-for-headlines"/>
      <param/>
    </rule>
    <xsl:apply-templates select=".//dbk:anchor" mode="#current"/>
  </template>
  
  <template context="dbk:title[matches(@role, '^[a-z]{2,3}heading(enumerated)?4$')]">
    <xsl:choose>
      <xsl:when test="dbk:phrase[@role eq 'hub:identifier']">
        <xsl:value-of select="concat('\setcounter{secnumdepth}{', $secnumdepth, '}&#xa;')"/>
        <xsl:value-of select="string-join(('\def\thesubsubsection{', dbk:phrase[@role eq 'hub:identifier'], '}&#xa;'), '')"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>\setcounter{secnumdepth}{1}</xsl:text>    
      </xsl:otherwise>
    </xsl:choose>
    <rule name="subsubsection" type="cmd" break-after="2" break-before="2">
      <xsl:call-template name="option-for-headlines"/>
      <param/>
    </rule>
    <xsl:apply-templates select=".//dbk:anchor" mode="#current"/>
  </template>
  
  <template context="dbk:title[matches(@role, '^[a-z]{2,3}heading(enumerated)?5$')]">
    <xsl:choose>
      <xsl:when test="dbk:phrase[@role eq 'hub:identifier']">
        <xsl:value-of select="concat('\setcounter{secnumdepth}{', $secnumdepth, '}&#xa;')"/>
        <xsl:value-of select="concat('\def\theparagraph{', dbk:phrase[@role eq 'hub:identifier'], '}&#xa;')"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>\setcounter{secnumdepth}{2}</xsl:text>    
      </xsl:otherwise>
    </xsl:choose>
    <rule name="paragraph" type="cmd" break-after="2" break-before="2">
      <param/>
    </rule>
    <xsl:apply-templates select=".//dbk:anchor" mode="#current"/>
  </template>

  <template context="dbk:preface/dbk:title
                    |dbk:preface/dbk:info/dbk:title">
    <rule name="chapter*" type="cmd"  break-after="2" break-before="2">
      <xsl:call-template name="option-for-headlines"/>
      <param/>
      <text select="concat('\addcontentsline{toc}{chapter}{', ., '}')"/>
    </rule>
  </template>
  
  <template context="dbk:dedication">
    <rule name="widmung" type="env"  break-after="1" break-before="1">
      <param/>
    </rule>
  </template>
  
  <template context="dbk:dedication//dbk:br">
    <xsl:text>\\</xsl:text>
  </template>
  
  <template context="dbk:part/dbk:title
                    |dbk:part/dbk:info/dbk:title">
      <rule name="part" type="cmd" break-after="2" break-before="2">
        <xsl:text>{</xsl:text>
        <xsl:if test="dbk:phrase[@role eq 'hub:identifier']">
          <xsl:value-of select="concat('\protect\numberline{', dbk:phrase[@role eq 'hub:identifier'] ,'&#x20;}')"/>
        </xsl:if>
        <xsl:apply-templates mode="#current"/>
        <xsl:text>}</xsl:text>
      </rule>
      <xsl:apply-templates select=".//dbk:anchor" mode="#current"/>
  </template>
  
  <template context="dbk:blockquote[dbk:para][not(matches(@role, '^[a-z]+_?verse.*$'))]
                    |dbk:blockquote[matches(@role, $dialogue-style)]">
    <rule name="quotation" type="env" break-before="1" break-after="2">
      <text/>
    </rule>
  </template>
  
  <template context="dbk:blockquote[not(matches(@role, '^[a-z]+_?verse.*$'))]
                                   [count(dbk:para) gt 1]/dbk:para">
    <rule break-after="2">
      <text>\setlength{\parindent}{5mm}</text>
      <text/>
    </rule>
  </template>
  
 <template context="dbk:para[following-sibling::*[1][self::dbk:blockquote]]
                    |dbk:blockquote/dbk:para[last()]
                    |dbk:caption/dbk:para[last()]">
    <rule break-after="0">
      <text/>
    </rule>
    <!-- copied from common to reinstall template priorities-->
  </template>
  
  <template context="dbk:bibliography[not(@role eq 'Citavi')]
                                       [not(parent::dbk:bibliography)]">
    <xsl:text>\FloatBarrier&#xa;</xsl:text>
    <xsl:apply-templates select="dbk:info/dbk:title" mode="#current"/>
    <xsl:apply-templates select="dbk:info/dbk:abbrev" mode="#current"/>
    <rule name="thebibliography" type="env" break-after="2" break-before="1">
      <param>0</param>
      <text select="dbk:bibliomixed"/>
    </rule>
  </template>
  
  <template context="dbk:phrase[matches(@role, $underline-style)]
                               [not(ancestor::dbk:title)]">
    <rule name="underline" type="cmd">
      <param/>
    </rule>
  </template>
  
  <template context="dbk:table">
    <rule name="transcriptTab" type="cmd" break-after="2" break-before="1">
      <xsl:text>{</xsl:text>
      <xsl:apply-templates select="dbk:title, dbk:caption" mode="#current"/>
      <xsl:text>}&#xa;</xsl:text>
      <param select="dbk:tgroup"/>
    </rule>
  </template>

  <!-- fix outer par issue -->
  
  <template context="dbk:para[following-sibling::*[1][self::dbk:figure or self::dbk:table]]//dbk:br"/>
  
  <!-- copied from ../a9s/common/xml2tex/latex.conf.xml -->
  
  <template context="*[local-name() = ('table', 'informaltable')]
                      [   matches(@role, $rotated-table-style)
                       or exists(.//dbk:entry[   matches(@css:transform, 'rotate\((90|270)deg\)')
                                 or @css:writing-mode eq 'bt-lr']
                                 )]">
    <rule name="sidewaystable" type="env">
      <param select="dbk:title, 
                     dbk:caption"/>
      <param select="dbk:tgroup"/>
    </rule>
  </template>
  
  <template context="dbk:figure[not(matches(@role, $fig-style))]">
    <rule name="transcriptBild" type="cmd" break-after="1" break-before="1">
      <param select="dbk:title, 
                     dbk:caption"/>
      <param select="dbk:mediaobject/dbk:imageobject"/>
    </rule>
  </template>

  <template context="dbk:figure[matches(@role, $fig-style)]
                    |dbk:informalfigure[matches(@role, $fig-style)]">
    <rule name="figure" type="env" break-after="2" break-before="1">
      <option>h!</option>
      <xsl:text>&#xa;\transcriptFixedFigure{%&#xa;</xsl:text>
      <xsl:apply-templates select="dbk:title, dbk:caption" mode="#current"/>
      <xsl:text>}</xsl:text>
      <param select="upper-case(replace(@role, $fig-style, '$1'))"/>
      <xsl:text>{%</xsl:text>
      <xsl:for-each select=".//dbk:mediaobject">
        <xsl:text>&#xa;</xsl:text>
        <xsl:apply-templates select="dbk:imageobject" mode="#current"/>
      </xsl:for-each>
      <xsl:text>}</xsl:text>
    </rule>
  </template>

  <template context="dbk:figure/dbk:title
                    |dbk:table/dbk:title">
    <rule break-after="1" break-before="1" name="caption" type="cmd">
      <param/>
    </rule>
  <!-- copied from docx2tex/conf for compatibility reasons-->
  </template>
  
  <template context="dbk:figure/dbk:title[not(matches(., '^[\S\r\n]+$'))]
                    |dbk:table/dbk:title[not(matches(., '^[\S\r\n]+$'))]">
    <rule name="caption" type="cmd">
      <xsl:if test=".//dbk:footnote
                   |.//dbk:link">
        <xsl:text>[</xsl:text>
        <xsl:apply-templates mode="figure-titles"/>
        <xsl:text>]</xsl:text>
      </xsl:if>
      <param/>
    </rule>
  </template>
  
  <xsl:template match="dbk:figure/dbk:title//text()[matches(., '[\[\]]')]" mode="xml2tex figure-titles" priority="10">
    <xsl:value-of select="replace(., '([\[\]])', '\\$1')"/>
  </xsl:template>
  
  <template context="dbk:figure[not(matches(@role, $fig-style))]/dbk:mediaobject/dbk:imageobject[dbk:imagedata[@fileref]]">
    <rule name="includegraphics" type="cmd">
      <option select="concat('width=', 
                             1 div count(ancestor::*[dbk:mediaobject
                                                    |dbk:inlinemediaobject]/*[local-name() = ('mediaobject', 
                                                                                              'inlinemediaobject')]),'\textwidth')"/>
      <param select="replace(dbk:imagedata/@fileref, '^.+/(.+?)$', concat($image-dir, '$1'))"/>
    </rule>
  </template>
  
  <template context="dbk:figure[matches(@role, $fig-style)]/dbk:mediaobject/dbk:imageobject[dbk:imagedata[@fileref]]">
    <rule name="includesubgraphics" type="cmd">
      <xsl:text>{}</xsl:text>
      <param select="replace(dbk:imagedata/@fileref, '^.+/(.+?)$', concat($image-dir, '$1'))"/>
    </rule>
  </template>
  
  <template context="dbk:figure/dbk:caption
                    |dbk:table/dbk:caption">
    <rule name="capsource" type="cmd">
      <param/>
    </rule>
  </template>
  
  <template context="/dbk:hub/*[self::dbk:part | self::dbk:chapter | self::dbk:section][1]">
    <xsl:next-match/>
  </template>

  <template context="dbk:section[count(ancestor::dbk:section) eq 0]/dbk:subtitle
                    |dbk:section[count(ancestor::dbk:section) eq 0]/dbk:info/dbk:subtitle">
    <rule name="subheading" type="cmd" break-after="2" break-before="2">
      <param/>
    </rule>
  </template>
  
  <template context="dbk:section[count(ancestor::dbk:section) gt 0]/dbk:subtitle
                    |dbk:section[count(ancestor::dbk:section) gt 0]/dbk:info/dbk:subtitle">
    <rule name="subsubheading" type="cmd" break-after="2" break-before="2">
      <param/>
    </rule>
  </template>

  <template context="*[not(local-name() = ('part', 'chapter', 'section'))][@css:page-break-before='always']">
    <xsl:text>\pagebreak&#xa;</xsl:text>
    <xsl:next-match/>
  </template>

  <template context="dbk:para[dbk:personname[@role eq 'speaker']]">
    <rule name="item" type="cmd" break-before="1">
      <option select="dbk:personname[@role eq 'speaker']/normalize-space(string-join(node(), ''))"/>
      <text select="node() except dbk:personname[@role eq 'speaker']"/>
    </rule>
  </template>
  
  <!-- https://redmine.le-tex.de/issues/9852 -->
  
  <xsl:variable name="list-mark-map" as="element(xml2tex:map)+">
    <xml2tex:map from="dash"   to="&#x2014;"/>
    <xml2tex:map from="bullet" to="&#x2022;"/>
    <xml2tex:map from="circle" to="&#x25cb;"/>
    <xml2tex:map from="square" to="&#x25aa;"/>
  </xsl:variable>

  <template context="dbk:itemizedlist[@mark]/dbk:listitem">
    <rule name="item" type="cmd">
      <option select="if(matches(parent::*/@mark, string-join($list-mark-map/@from, '|')))
                      then for $mark in parent::*/@mark
                           return $list-mark-map[@from eq $mark]/@to
                      else parent::*/@mark"/>
      <text select="' '"/>
      <text/>
    </rule>
  </template>
  
  <template context="*[self::dbk:chapter | self::dbk:section | self::dbk:part | self::dbk:appendix][dbk:info[dbk:title[matches(@role, $list-of-figures-style)]]]">
    <xsl:apply-templates select="dbk:info" mode="#current"/>
    <rule name="listoffigures" type="cmd" break-after="1"/>
  </template>
  
  
   <template context="*[self::dbk:chapter 
                       |self::dbk:section 
                       |self::dbk:part
                       |self::dbk:appendix]
                       [dbk:info[dbk:title[matches(@role, $list-of-figures-style)]]]">
    <rule>
      <text/>
    </rule>
  </template>
  
  <template context="*[self::dbk:chapter 
                      |self::dbk:section 
                      |self::dbk:part
                      |self::dbk:appendix]
                      [dbk:info[dbk:title[matches(@role, $list-of-tables-style)]]]">
    <rule>
      <text/>
    </rule>
  </template>
  
  <template context="dbk:para[matches(@role, $list-of-figures-style)]
                    |dbk:title[matches(@role, $list-of-figures-style)]">
    <rule name="renewcommand" type="cmd" break-after="1" break-before="1">
      <param>\listfigurename</param>
      <param/>
    </rule>
    <rule name="listoffigures" type="cmd" break-after="1"/>
  </template>
  
  <template context="dbk:para[matches(@role, $list-of-tables-style)]
                    |dbk:title[matches(@role, $list-of-tables-style)]">
    <rule name="renewcommand" type="cmd" break-after="1" break-before="1">
      <param>\listtablename</param>
      <param/>
    </rule>
    <rule name="listoftables" type="cmd" break-after="1"/>
  </template>
  
  <template context="dbk:para[matches(@role, 'tsmedia(caption|url|source)')]" priority="300"/>
  
  <template context="dbk:link[@xlink:href][matches(@xlink:href, '^(https?|ftp):') or matches(., '^(https?|ftp):')]">
    <rule name="href" type="cmd">
      <param select="replace((@url, @xlink:href)[1], '(%|#|_|\\)', '\\$1' )"/>
      <param select="xml2tex:add-tactical-break-chars-in-linktext(.)"/>
    </rule>
  </template>
  
  <template context="dbk:info/dbk:epigraph[@role eq 'motto']">
    <rule name="chapterquote" type="cmd">
      <param select="dbk:para"/>
    </rule>
  </template>
  
  <template context="dbk:part/dbk:info/dbk:epigraph[@role eq 'motto']">
    <rule>
      <text/>
    </rule>
  </template>
  
  <template context="dbk:section/dbk:info/dbk:epigraph[@role eq 'motto']">
    <rule name="secquote" type="cmd">
      <param select="dbk:para"/>
    </rule>
  </template>
  
  <template context="dbk:epigraph[@role eq 'motto']/dbk:para[position() eq last()]">
    <rule>
      <text/>
    </rule>
  </template>
  
  <template context="dbk:epigraph[@role eq 'motto']/dbk:para[position() ne last()]">
    <rule>
      <text/>
      <text>\\&#xa;</text>
    </rule>
  </template>
  
  <template context="dbk:epigraph[@role eq 'motto']/dbk:para[matches(@role, $motto-source-style)]">
    <rule name="textit" type="cmd">
      <param/>
    </rule>
  </template>
  
  <template context="dbk:epigraph[@role eq 'motto']/dbk:para[not(position() eq last())]
                                                            [matches(@role, $motto-source-style)]">
    <rule>
      <text/>
      <text>\par\vskip\baselineskip&#xa;</text>
    </rule>
  </template>
  
  <template context="dbk:para[preceding-sibling::*[1][self::*/local-name() = ('itemizedlist', 'orderedlist', 'variablelist')]]">
    <rule>
      <text>\noindent{}</text>
      <xsl:next-match/>
    </rule>
  </template>
  
  <template context="dbk:mediaobject[not(..[self::dbk:figure])]
                                    [dbk:imageobject/dbk:imagedata[@fileref]]">
    <rule name="figure" type="env" break-after="1" break-before="1">
      <option>h!</option>
      <text/>
    </rule>
  </template>
  
</set>
